name: Build and Release 

on:
  push:
    branches: [ main ]

permissions:
  contents: write
  packages: write

env:
  REGISTRY: ghcr.io
  APP_NAME: run-dotnet
  IMAGE_NAMESPACE: ${{ github.repository_owner }}/run-dotnet

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create.outputs.upload_url }}
      tag_name: ${{ steps.bump_tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch all tags
        run: git fetch --tags

      - name: Get latest tag
        id: get_tag
        run: |
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest=$latest_tag" >> $GITHUB_OUTPUT

      - name: Bump Tag
        id: bump_tag
        run: |
          old="${{ steps.get_tag.outputs.latest }}"
          base="${old#v}"
          IFS='.' read -r major minor patch <<< "$base"
          patch=$((patch+1))
          new="v$major.$minor.$patch"
          echo "tag=$new" >> $GITHUB_OUTPUT

      - name: Create Git tag (if new)
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          tag="${{ steps.bump_tag.outputs.tag }}"
          if git ls-remote --tags origin | grep -q "refs/tags/$tag"; then
            echo "Tag $tag already exists on remote, skipping creation."
          else
            git tag "$tag"
            git push origin "$tag"
          fi

      - name: Create GitHub Release
        id: create
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.bump_tag.outputs.tag }}
          release_name: Release ${{ steps.bump_tag.outputs.tag }}
          draft: false
          prerelease: false

  build-builder-images:
    needs: create-release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: [22.04, 24.04]

    steps:
      - uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set image names
        id: vars
        run: |
          echo "IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}:${{ matrix.version }}" >> $GITHUB_OUTPUT
          echo "CACHE=${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}:${{ matrix.version }}-cache" >> $GITHUB_OUTPUT

      - uses: docker/setup-buildx-action@v3

      - name: Build & Push builder image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./.github/Dockerfile.ubuntu${{ matrix.version }}
          push: true
          tags: ${{ steps.vars.outputs.IMAGE }}
          cache-from: type=registry,ref=${{ steps.vars.outputs.CACHE }}
          cache-to: type=registry,ref=${{ steps.vars.outputs.CACHE }},mode=max

  build-multi-docker:
    needs: build-builder-images
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: [22.04, 24.04]

    steps:
      - uses: actions/checkout@v4

      - name: Build binary for Ubuntu ${{ matrix.version }}
        run: |
          IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}:${{ matrix.version }}
          docker pull $IMAGE
          docker run --rm -v $(pwd):/src -w /src $IMAGE \
            bash -c "dos2unix build.sh && bash build.sh && cp ./.build/${{ env.APP_NAME }} ${{ env.APP_NAME }}-ubuntu${{ matrix.version }}"

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-binaries-${{ matrix.version }}
          path: ${{ env.APP_NAME }}-ubuntu${{ matrix.version }}
          retention-days: 5

  release-assets:
    needs: [create-release, build-multi-docker]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: [22.04, 24.04]

    steps:
      - name: Download binary artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-binaries-${{ matrix.version }}
          path: ./release-bin

      - name: Upload ${{ matrix.version }} asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./release-bin/${{ env.APP_NAME }}-ubuntu${{ matrix.version }}
          asset_name: ${{ env.APP_NAME }}-ubuntu${{ matrix.version }}
          asset_content_type: application/octet-stream